/**
 * 
 */
package org.mixare.lib.gui;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.opengles.GL11;
import javax.microedition.khronos.opengles.GL11Ext;

import android.graphics.Bitmap;
import android.graphics.Paint;

/**
 * Simple square in which we can (and should) bind a texture, see
 * {@link Util#loadGLTexture(GL10, android.graphics.Bitmap)}. Contains several
 * different drawing methods which can be set in {@link GLParameters}
 * 
 * @author Edwin Schriek Nov 14, 2012 mixare-library
 * 
 */
public class Square {

	private int crop[];
	private FloatBuffer vertexBuffer; // buffer holding the vertices
	private float vertices[] = { 0.0f, 0.0f, 0.0f, // V1 - bottom left
			0.0f, 1.0f, 0.0f, // V2 - top left
			1.0f, 0.0f, 0.0f, // V3 - bottom right
			1.0f, 1.0f, 0.0f // V4 - top right
	};

	private FloatBuffer textureBuffer; // buffer holding the texture coordinates
	private float texture[] = {
			// Mapping coordinates for the vertices
			0.0f, 1.0f, // top left (V2)
			0.0f, 0.0f, // bottom left (V1)
			1.0f, 1.0f, // top right (V4)
			1.0f, 0.0f // bottom right (V3)
	};

	private ByteBuffer mIndexBuffer;
	private byte indices[] = { 0, 2, 3, 1 };

	/** The texture pointer */
	private int[] textures = new int[1];
	private boolean filled;
	private float lineWidth;
	private float x, y;
	private float[] color;
	private String identifier;
	private float width, height;
	private Bitmap img;
	private boolean isLoaded;
	private float rotation;

	public Square(String identifier, Bitmap img, Paint p, float x, float y,
			float width, float height) {
		this(p, x, y, width, height);
		this.img = img;
		this.identifier = identifier;
	}

	public Square(Paint paint, float x, float y, float width, float height) {

		this.color = Util.paintColorByteToFloat(paint);
		this.rotation = 0;

		if (paint.getStyle() == Paint.Style.FILL) {
			this.filled = true;
		} else {
			this.filled = false;
		}

		this.lineWidth = paint.getStrokeWidth();
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;

		vertices[0] *= width;
		vertices[3] *= width;
		vertices[6] *= width;
		vertices[9] *= width;

		vertices[1] *= height;
		vertices[4] *= height;
		vertices[7] *= height;
		vertices[10] *= height;

		// a float has 4 bytes so we allocate for each coordinate 4 bytes
		ByteBuffer byteBuffer = ByteBuffer.allocateDirect(vertices.length * 4);
		byteBuffer.order(ByteOrder.nativeOrder());

		// allocates the memory from the byte buffer
		vertexBuffer = byteBuffer.asFloatBuffer();

		// fill the vertexBuffer with the vertices
		vertexBuffer.put(vertices);

		// set the cursor position to the beginning of the buffer
		vertexBuffer.position(0);

		byteBuffer = ByteBuffer.allocateDirect(texture.length * 4);
		byteBuffer.order(ByteOrder.nativeOrder());
		textureBuffer = byteBuffer.asFloatBuffer();
		textureBuffer.put(texture);
		textureBuffer.position(0);

		mIndexBuffer = ByteBuffer.allocateDirect(indices.length);
		mIndexBuffer.put(indices);
		mIndexBuffer.position(0);
	}
	
	public Bitmap getImg() {
		return img;
	}

	public void setImg(Bitmap img) {
		this.img = img;
	}

	public float getRotation() {
		return rotation;
	}

	public void setRotation(float rotation) {
		this.rotation = rotation;
	}

	@Override
	public boolean equals(Object o) {

		if (((Square) o).getIdentifier().equalsIgnoreCase(this.getIdentifier())) {
			return true;
		}
		return false;
	}

	public int[] getTextures() {
		return textures;
	}

	public void setTextures(int[] textures) {
		this.textures = textures;
	}

	public String getIdentifier() {
		return identifier;
	}

	public void setIdentifier(String identifier) {
		this.identifier = identifier;
	}

	public float getX() {
		return x;
	}

	public void setX(float x) {
		this.x = x;
	}

	public float getY() {
		return y;
	}

	public void setY(float y) {
		this.y = y;
	}

	public float getWidth() {
		return width;
	}

	public void setWidth(float width) {
		this.width = width;
	}

	public float getHeight() {
		return height;
	}

	public void setHeight(float height) {
		this.height = height;
	}

	public void update(Square o) {
		this.x = o.getX();
		this.y = o.getY();
		this.width = o.getWidth();
		this.height = o.getHeight();
		this.rotation = o.getRotation();
	}

	/**
	 * Do the drawing, with a texture
	 * 
	 * @param gl
	 *            The gl object supplied by onDraw
	 * @param texture
	 *            Texture generated by
	 *            {@link Util#loadGLTexture(GL10, android.graphics.Bitmap)}
	 */
	public void draw(GL10 gl, int[] texture) {

		this.textures = texture;

		this.draw(gl);
	}

	public boolean isLoaded() {
		return isLoaded;
	}

	/**
	 * This method should not be called directly, use
	 * {@link Square#draw(GL10, int[])} instead
	 * 
	 * @param gl
	 *            The gl object supplied by onDraw
	 */
	public void draw(GL10 gl) {

		// bind the previously generated texture
		gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);

		if (GLParameters.DRAWTEX) {
			crop = new int[] { 0, (int) height, (int) width, (int) -height };

			//SIGSEGV HERE
			((GL11) gl).glTexParameteriv(GL10.GL_TEXTURE_2D,
					GL11Ext.GL_TEXTURE_CROP_RECT_OES, crop, 0);

			((GL11Ext) gl).glDrawTexfOES(x, y, 0, width, height);
			
		} else {

			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

			// Set the face rotation
			gl.glFrontFace(GL10.GL_CW);

			// Point to our vertex buffer
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, textureBuffer);

			gl.glPushMatrix();
			gl.glTranslatef(x, y, 0f);
			if (textures[0] == 0) {
				gl.glColor4f(color[0], color[1], color[2], color[3]);
			}

			if (rotation != 0) {
				gl.glRotatef(rotation, 1f, 0, 0f);
			}

			if (!filled) {
				gl.glLineWidth(lineWidth);
				gl.glDrawElements(GL10.GL_LINE_LOOP, vertices.length / 3,
						GL10.GL_UNSIGNED_BYTE, mIndexBuffer);
			} else {
				// Draw the vertices as triangle strip
				gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, vertices.length / 3);
			}

			gl.glPopMatrix();

			// Disable the client state before leaving
			gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
		}

	}
}
